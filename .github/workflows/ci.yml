name: CI
on: [push]

jobs:
  pre-commit-checks:
    name: Linux - pre-commit checks - Python 3.10
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      PRE_COMMIT_USE_MICROMAMBA: 1
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@875557da4ee020f18df03b8910a42203fbf02da1
      - name: Add micromamba to GITHUB_PATH
        run: echo "${HOME}/micromamba-bin" >> "$GITHUB_PATH"
      - name: Install Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0

  unit-tests:
    name: Tests - ${{ matrix.os }} - Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    env:
      CI: True
    strategy:
      fail-fast: true
      matrix:
        include:
          - { os: ubuntu-latest, python-version: '3.8' }
          - { os: ubuntu-latest, python-version: '3.9' }
          - { os: ubuntu-latest, python-version: '3.10' }
          - { os: ubuntu-latest, python-version: '3.11' }
          - { os: macos-latest, python-version: '3.10' }
          - { os: windows-latest, python-version: '3.10' }
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up conda env
        uses: mamba-org/setup-micromamba@875557da4ee020f18df03b8910a42203fbf02da1
        with:
          environment-file: environment.yml
          init-shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
          cache-environment: true
          create-args: >-
            python=${{ matrix.python-version }}
      - name: Install repository (unix)
        if: matrix.os != 'windows-latest'
        shell: bash -el {0}
        run: pip install --no-use-pep517 --no-deps --disable-pip-version-check -e .
      - name: Install repository (windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: pip install --no-use-pep517 --no-deps --disable-pip-version-check -e .
      - name: Run pytest (unix)
        if: matrix.os != 'windows-latest'
        shell: bash -el {0}
        run: pytest -nauto tests/glm --doctest-modules src/glum
      - name: Run pytest (windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: pytest -nauto .\tests\glm --doctest-modules .\src\glum
      - name: Run doctest
        if: matrix.os != 'windows-latest'
        shell: bash -el {0}
        # Check that the readme example will work by running via doctest.
        # We run outside the repo to make the test a bit more similar to
        # a user running after installing with conda.
        run: |
          mkdir ../temp
          cp README.md ../temp
          cd ../temp
          python -m doctest -v README.md
